package bench

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BenchChild) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Int":
			z.Int, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Int")
				return
			}
		case "String":
			z.String, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "String")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BenchChild) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Int"
	err = en.Append(0x82, 0xa3, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Int)
	if err != nil {
		err = msgp.WrapError(err, "Int")
		return
	}
	// write "String"
	err = en.Append(0xa6, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.String)
	if err != nil {
		err = msgp.WrapError(err, "String")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BenchChild) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Int"
	o = append(o, 0x82, 0xa3, 0x49, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Int)
	// string "String"
	o = append(o, 0xa6, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67)
	o = msgp.AppendString(o, z.String)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BenchChild) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Int":
			z.Int, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Int")
				return
			}
		case "String":
			z.String, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "String")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BenchChild) Msgsize() (s int) {
	s = 1 + 4 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.String)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BenchMarkStruct) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Int":
			z.Int, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Int")
				return
			}
		case "Uint":
			z.Uint, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "Uint")
				return
			}
		case "Float":
			z.Float, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Float")
				return
			}
		case "Double":
			z.Double, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Double")
				return
			}
		case "Bool":
			z.Bool, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Bool")
				return
			}
		case "String":
			z.String, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "String")
				return
			}
		case "Array":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Array")
				return
			}
			if cap(z.Array) >= int(zb0002) {
				z.Array = (z.Array)[:zb0002]
			} else {
				z.Array = make([]int, zb0002)
			}
			for za0001 := range z.Array {
				z.Array[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Array", za0001)
					return
				}
			}
		case "Map":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Map")
				return
			}
			if z.Map == nil {
				z.Map = make(map[string]uint, zb0003)
			} else if len(z.Map) > 0 {
				for key := range z.Map {
					delete(z.Map, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				var za0003 uint
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Map")
					return
				}
				za0003, err = dc.ReadUint()
				if err != nil {
					err = msgp.WrapError(err, "Map", za0002)
					return
				}
				z.Map[za0002] = za0003
			}
		case "Child":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Child")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Child")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Int":
					z.Child.Int, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Child", "Int")
						return
					}
				case "String":
					z.Child.String, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Child", "String")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Child")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BenchMarkStruct) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Int"
	err = en.Append(0x89, 0xa3, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Int)
	if err != nil {
		err = msgp.WrapError(err, "Int")
		return
	}
	// write "Uint"
	err = en.Append(0xa4, 0x55, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint(z.Uint)
	if err != nil {
		err = msgp.WrapError(err, "Uint")
		return
	}
	// write "Float"
	err = en.Append(0xa5, 0x46, 0x6c, 0x6f, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Float)
	if err != nil {
		err = msgp.WrapError(err, "Float")
		return
	}
	// write "Double"
	err = en.Append(0xa6, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Double)
	if err != nil {
		err = msgp.WrapError(err, "Double")
		return
	}
	// write "Bool"
	err = en.Append(0xa4, 0x42, 0x6f, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Bool)
	if err != nil {
		err = msgp.WrapError(err, "Bool")
		return
	}
	// write "String"
	err = en.Append(0xa6, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.String)
	if err != nil {
		err = msgp.WrapError(err, "String")
		return
	}
	// write "Array"
	err = en.Append(0xa5, 0x41, 0x72, 0x72, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Array)))
	if err != nil {
		err = msgp.WrapError(err, "Array")
		return
	}
	for za0001 := range z.Array {
		err = en.WriteInt(z.Array[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Array", za0001)
			return
		}
	}
	// write "Map"
	err = en.Append(0xa3, 0x4d, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Map)))
	if err != nil {
		err = msgp.WrapError(err, "Map")
		return
	}
	for za0002, za0003 := range z.Map {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Map")
			return
		}
		err = en.WriteUint(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Map", za0002)
			return
		}
	}
	// write "Child"
	err = en.Append(0xa5, 0x43, 0x68, 0x69, 0x6c, 0x64)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Int"
	err = en.Append(0x82, 0xa3, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Child.Int)
	if err != nil {
		err = msgp.WrapError(err, "Child", "Int")
		return
	}
	// write "String"
	err = en.Append(0xa6, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Child.String)
	if err != nil {
		err = msgp.WrapError(err, "Child", "String")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BenchMarkStruct) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Int"
	o = append(o, 0x89, 0xa3, 0x49, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Int)
	// string "Uint"
	o = append(o, 0xa4, 0x55, 0x69, 0x6e, 0x74)
	o = msgp.AppendUint(o, z.Uint)
	// string "Float"
	o = append(o, 0xa5, 0x46, 0x6c, 0x6f, 0x61, 0x74)
	o = msgp.AppendFloat32(o, z.Float)
	// string "Double"
	o = append(o, 0xa6, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65)
	o = msgp.AppendFloat64(o, z.Double)
	// string "Bool"
	o = append(o, 0xa4, 0x42, 0x6f, 0x6f, 0x6c)
	o = msgp.AppendBool(o, z.Bool)
	// string "String"
	o = append(o, 0xa6, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67)
	o = msgp.AppendString(o, z.String)
	// string "Array"
	o = append(o, 0xa5, 0x41, 0x72, 0x72, 0x61, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Array)))
	for za0001 := range z.Array {
		o = msgp.AppendInt(o, z.Array[za0001])
	}
	// string "Map"
	o = append(o, 0xa3, 0x4d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.Map)))
	for za0002, za0003 := range z.Map {
		o = msgp.AppendString(o, za0002)
		o = msgp.AppendUint(o, za0003)
	}
	// string "Child"
	o = append(o, 0xa5, 0x43, 0x68, 0x69, 0x6c, 0x64)
	// map header, size 2
	// string "Int"
	o = append(o, 0x82, 0xa3, 0x49, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Child.Int)
	// string "String"
	o = append(o, 0xa6, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67)
	o = msgp.AppendString(o, z.Child.String)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BenchMarkStruct) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Int":
			z.Int, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Int")
				return
			}
		case "Uint":
			z.Uint, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uint")
				return
			}
		case "Float":
			z.Float, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Float")
				return
			}
		case "Double":
			z.Double, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Double")
				return
			}
		case "Bool":
			z.Bool, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bool")
				return
			}
		case "String":
			z.String, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "String")
				return
			}
		case "Array":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Array")
				return
			}
			if cap(z.Array) >= int(zb0002) {
				z.Array = (z.Array)[:zb0002]
			} else {
				z.Array = make([]int, zb0002)
			}
			for za0001 := range z.Array {
				z.Array[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Array", za0001)
					return
				}
			}
		case "Map":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Map")
				return
			}
			if z.Map == nil {
				z.Map = make(map[string]uint, zb0003)
			} else if len(z.Map) > 0 {
				for key := range z.Map {
					delete(z.Map, key)
				}
			}
			for zb0003 > 0 {
				var za0002 string
				var za0003 uint
				zb0003--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map")
					return
				}
				za0003, bts, err = msgp.ReadUintBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map", za0002)
					return
				}
				z.Map[za0002] = za0003
			}
		case "Child":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Child")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Child")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Int":
					z.Child.Int, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Child", "Int")
						return
					}
				case "String":
					z.Child.String, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Child", "String")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Child")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BenchMarkStruct) Msgsize() (s int) {
	s = 1 + 4 + msgp.IntSize + 5 + msgp.UintSize + 6 + msgp.Float32Size + 7 + msgp.Float64Size + 5 + msgp.BoolSize + 7 + msgp.StringPrefixSize + len(z.String) + 6 + msgp.ArrayHeaderSize + (len(z.Array) * (msgp.IntSize)) + 4 + msgp.MapHeaderSize
	if z.Map != nil {
		for za0002, za0003 := range z.Map {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.UintSize
		}
	}
	s += 6 + 1 + 4 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Child.String)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Item) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Effect":
			z.Effect, err = dc.ReadFloat32()
			if err != nil {
				err = msgp.WrapError(err, "Effect")
				return
			}
		case "Num":
			z.Num, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Item) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ID"
	err = en.Append(0x84, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Effect"
	err = en.Append(0xa6, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat32(z.Effect)
	if err != nil {
		err = msgp.WrapError(err, "Effect")
		return
	}
	// write "Num"
	err = en.Append(0xa3, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint(z.Num)
	if err != nil {
		err = msgp.WrapError(err, "Num")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Item) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ID"
	o = append(o, 0x84, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Effect"
	o = append(o, 0xa6, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74)
	o = msgp.AppendFloat32(o, z.Effect)
	// string "Num"
	o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint(o, z.Num)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Item) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Effect":
			z.Effect, bts, err = msgp.ReadFloat32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Effect")
				return
			}
		case "Num":
			z.Num, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Item) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Name) + 7 + msgp.Float32Size + 4 + msgp.UintSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *User) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Level":
			z.Level, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "Level")
				return
			}
		case "Exp":
			z.Exp, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Exp")
				return
			}
		case "Type":
			z.Type, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "EquipIDs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "EquipIDs")
				return
			}
			if cap(z.EquipIDs) >= int(zb0002) {
				z.EquipIDs = (z.EquipIDs)[:zb0002]
			} else {
				z.EquipIDs = make([]uint32, zb0002)
			}
			for za0001 := range z.EquipIDs {
				z.EquipIDs[za0001], err = dc.ReadUint32()
				if err != nil {
					err = msgp.WrapError(err, "EquipIDs", za0001)
					return
				}
			}
		case "Items":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if cap(z.Items) >= int(zb0003) {
				z.Items = (z.Items)[:zb0003]
			} else {
				z.Items = make([]Item, zb0003)
			}
			for za0002 := range z.Items {
				err = z.Items[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *User) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "ID"
	err = en.Append(0x87, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Level"
	err = en.Append(0xa5, 0x4c, 0x65, 0x76, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint(z.Level)
	if err != nil {
		err = msgp.WrapError(err, "Level")
		return
	}
	// write "Exp"
	err = en.Append(0xa3, 0x45, 0x78, 0x70)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Exp)
	if err != nil {
		err = msgp.WrapError(err, "Exp")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "EquipIDs"
	err = en.Append(0xa8, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.EquipIDs)))
	if err != nil {
		err = msgp.WrapError(err, "EquipIDs")
		return
	}
	for za0001 := range z.EquipIDs {
		err = en.WriteUint32(z.EquipIDs[za0001])
		if err != nil {
			err = msgp.WrapError(err, "EquipIDs", za0001)
			return
		}
	}
	// write "Items"
	err = en.Append(0xa5, 0x49, 0x74, 0x65, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Items)))
	if err != nil {
		err = msgp.WrapError(err, "Items")
		return
	}
	for za0002 := range z.Items {
		err = z.Items[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Items", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *User) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "ID"
	o = append(o, 0x87, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Level"
	o = append(o, 0xa5, 0x4c, 0x65, 0x76, 0x65, 0x6c)
	o = msgp.AppendUint(o, z.Level)
	// string "Exp"
	o = append(o, 0xa3, 0x45, 0x78, 0x70)
	o = msgp.AppendUint64(o, z.Exp)
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendBool(o, z.Type)
	// string "EquipIDs"
	o = append(o, 0xa8, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.EquipIDs)))
	for za0001 := range z.EquipIDs {
		o = msgp.AppendUint32(o, z.EquipIDs[za0001])
	}
	// string "Items"
	o = append(o, 0xa5, 0x49, 0x74, 0x65, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Items)))
	for za0002 := range z.Items {
		o, err = z.Items[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Items", za0002)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *User) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Level":
			z.Level, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Level")
				return
			}
		case "Exp":
			z.Exp, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Exp")
				return
			}
		case "Type":
			z.Type, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "EquipIDs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EquipIDs")
				return
			}
			if cap(z.EquipIDs) >= int(zb0002) {
				z.EquipIDs = (z.EquipIDs)[:zb0002]
			} else {
				z.EquipIDs = make([]uint32, zb0002)
			}
			for za0001 := range z.EquipIDs {
				z.EquipIDs[za0001], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "EquipIDs", za0001)
					return
				}
			}
		case "Items":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if cap(z.Items) >= int(zb0003) {
				z.Items = (z.Items)[:zb0003]
			} else {
				z.Items = make([]Item, zb0003)
			}
			for za0002 := range z.Items {
				bts, err = z.Items[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *User) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.UintSize + 4 + msgp.Uint64Size + 5 + msgp.BoolSize + 9 + msgp.ArrayHeaderSize + (len(z.EquipIDs) * (msgp.Uint32Size)) + 6 + msgp.ArrayHeaderSize
	for za0002 := range z.Items {
		s += z.Items[za0002].Msgsize()
	}
	return
}
